[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["config*", "constants*", "controller*", "editor*", "service*"]

[project]
name = "plateerag-backend"
version = "0.1.0"
description = "PlateeRAG Backend"
readme = "README.md"
requires-python = "==3.12.*"

# --- Keep only what's needed for the API to start ---
dependencies = [
    "fastapi==0.116.1",
    "uvicorn>=0.38.0",
    "pydantic==2.11.7",
    "pydantic-settings==2.10.1",
    "orjson==3.11.0",

    # DB & clients
    "sqlalchemy==2.0.41",
    "psycopg2-binary==2.9.10",
    "redis==5.2.1",
    "qdrant-client==1.14.3",
    "minio==7.2.18",

    # HTTP / utils
    "httpx==0.28.1",
    "anyio==4.9.0",
    "python-multipart==0.0.20",
    "python-dotenv==1.1.1",
    "requests==2.32.4",
    "urllib3==2.2.3",
    "tenacity==9.1.2",
    "packaging==25.0",
    "idna==3.10",
    "h11==0.16.0",

    # JSON patch if you need it at startup
    "jsonpatch==1.33",
    "jsonpointer==3.0.0",

    # Arrow if used at startup (your code imports pyarrow early)
    "pyarrow==21.0.0",
]

[project.optional-dependencies]
# RAG/embedding stack (install only if enabled by config)
rag = [
    "transformers==4.53.0",
    "sentence-transformers==5.0.0",
    "tokenizers==0.21.2",
    "safetensors==0.5.3",
    "huggingface_hub==0.33.4",
    "tiktoken==0.9.0",
]

# CPU torch (install via CPU index in Dockerfile; see below)
torch-cpu = [
    "torch==2.7.1",        # will be installed with CPU index URL in Dockerfile
    "torchaudio==2.7.1",
]

# Japanese tokenization (small dict)
jp-core = [
    "sudachipy>=0.6.10",
    "sudachidict-core>=20241021",
]

# ML stack (heavy)
ml = [
    "scikit-learn==1.7.0",
    "scipy==1.16.0",
    "sympy==1.14.0",
    "numpy==2.3.2",
]

# Docs / file formats (add if feature used)
doc = [
    "pymupdf==1.26.3",
    "pdf2image>=1.17.0",
    "pdfminer.six>=20201018",
    "pillow==11.3.0",
    "openpyxl==3.1.5",
    "xlsxwriter==3.2.9",
    "xlrd==2.0.2",
]

# LangChain stack (heavy)
langchain = [
    "langchain==0.3.26",
    "langchain-community==0.3.27",
    "langchain-core==0.3.69",
    "langchain-openai==0.3.28",
    "langchain-text-splitters==0.3.8",
    "langsmith==0.4.7",
]

# Cloud/ops
cloud = [
    "boto3>=1.40.40",
    "PyGithub==2.8.1",
    "mlflow>=3.4.0",
    "duckduckgo-search==8.1.0",
]

# Full Japanese dict (very large!) â€” avoid unless you need all entries
jp-full = [
    "sudachidict-full==20250825",
]

# GPU stack (leave out unless running on GPU nodes)
gpu = [
    "nvidia-cublas-cu12==12.6.4.1",
    "nvidia-cuda-cupti-cu12==12.6.80",
    "nvidia-cuda-nvrtc-cu12==12.6.77",
    "nvidia-cuda-runtime-cu12==12.6.77",
    "nvidia-cudnn-cu12==9.5.1.17",
    "nvidia-cufft-cu12==11.3.0.4",
    "nvidia-cufile-cu12==1.11.1.6",
    "nvidia-curand-cu12==10.3.7.77",
    "nvidia-cusolver-cu12==11.7.1.2",
    "nvidia-cusparse-cu12==12.5.4.2",
    "nvidia-cusparselt-cu12==0.6.3",
    "nvidia-nccl-cu12==2.26.2",
    "nvidia-nvjitlink-cu12==12.6.85",
    "nvidia-nvtx-cu12==12.6.77",
]

[tool.uv]
# Install only the base dependencies by default
default-groups = []

